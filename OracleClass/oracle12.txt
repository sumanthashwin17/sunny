PL/SQL functions 
=================
It is a named PL/SQL block which must and should returns a value.

syntax:
------
	create or replace function <function_name>()
	return datatype 
	is
	begin
	-
	- //code here 
	-
	end;
	/

Q) Write a PL/SQL function to perform sum of two numbers and return sum?


	create or replace function sum_fun(A number,B number)
	return number
	is
	C number;
	begin 
	C:=A+B;
	return C;
	END;
	/

	To execute function we need to use below command.
	ex:
		select sum_fun(10,20) from dual;


Q) Write a function to accept one salary and find out 10% of Tax?

	
	create or replace function tax_fun(SAL number)
	return number
	is
	TAX number;
	begin 
	TAX:=SAL*10/100;
	return TAX;
	END;
	/

	To execute the function we need to use below command.		
	ex:
		select tax_fun(1000) from dual;

		select eid,ename,esal,tax_fun(esal) as TAX from emp;



Q) What is the difference between procedure and function?

Procedure					function 
----------					----------
Procedure may or may not returns a value.	Function always returns a value.

DML operations are allowed.			DML operations are not allowed.

Can't be invoked by using select stmt.		Can be invoked by using select stmt.




Q) Write a query to see the list of functions present in database?

	select object_name from user_objects where object_type='FUNCTION';


Q) Write a query to see the source code of a function?

	select text from user_source where name='SUM';


Q) Write a query to drop the function?

	drop function sum;
	drop functoin sum_fun;
	drop function tax_fun;


Packages
===========
A package is a collection of logical related sub programs.

PL/SQL procedures and functions are called logical related sub programs.

Package creation involved into steps.

1) Package specification 
-----------------------
	It contains declaration of logical related sub programs.

2) Package body 
---------------
	It contains definition of logical related sub programs.

example1:
---------
package specification 
----------------------

	create or replace package pkg1 	
	is
	procedure sum_proc(A IN number,B IN number);
	end pkg1;
	/

package body 
-------------

	create or replace package body pkg1
	is
	
	procedure sum_proc(A IN number,B IN number)
	is
	C number;
	begin
	C:=A+B;		
	DBMS_OUTPUT.PUT_LINE(C);
	END;

	end pkg1;
	/


To execute the procedure we need to use below command.
ex:
	exec  pkg1.sum_proc(50,30);


example2:
--------

package specification 
-------------------
	create or replace package pkg2
	is

	function sum_fun(A number,B number)
	return number;		

	end pkg2;
	/

package body 
-------------
	create or replace package body pkg2
	is

	function sum_fun(A number,B number)
	return number
	is
	C number;
	begin 
	C:=A+B;
	return C;
	end;

	end pkg2;
	/

To execute function we need to use below command.
ex:
	select pkg2.sum_fun(50,60) from dual;


Q) Write a query to see the list of packages present in database?

	select object_name from user_objects where object_type='PACKAGE';


Q) Write a query to see the source code of a package?

	select text from user_source where name='PKG1';


Q) Write a query to drop the package?

	drop package pkg1;
	drop package pkg2;




Triggers 
=========
It is a named PL/SQL which executes based on the events.

Trigger events are insert, update and delete.

Triggers timmings are before, after and insteadof.

syntax:
-------
	create or replace trigger <trigger_name> <timming> <event> on <object_name> 
	begin 
	-
	- //code here 
	-
	END;
	/

ex:
---
	create or replace trigger trg1 before insert on student 
	begin 
	DBMS_OUTPUT.PUT_LINE('Yahoo! Inserted');
	END;
	/
	
	insert into student values(104,'ramulu','pune');


We can create multiple events on trigger.

ex:
---
	create or replace trigger trg2 after insert OR update OR delete on student
	begin 
	if inserting then 
	DBMS_OUTPUT.PUT_LINE('Yahoo! Inserted');
	elsif updating then 
	DBMS_OUTPUT.PUT_LINE('Yahoo! Updated');
	else
	DBMS_OUTPUT.PUT_LINE('Yahoo! Deleted');
	END IF;
	END;
	/

	delete from student where sno=104;
	update student set sname='raja' where sname='rani';
	insert into student values(104,'ramulu','vizag');

Triggers are classified into two types.

1) Statement level trigger 

2) Row level trigger 


1) Statement level trigger
---------------------------
In statement level trigger, our trigger will execute only for one time irrespective of number of records effecting in a database table.

By default every trigger is a statement level trigger.

ex:
	create or replace trigger trg3 before delete on student
	begin 
	DBMS_OUTPUT.PUT_LINE('Deleted!!!!!!');
	end;
	/

	delete from student; // trigger will execute 1 time 


2) Row level trigger
------------------
In row level trigger, our trigger will execute irrespective of number of records effecting in a database table.

To create a row level trigger we need to use "FOR EACH ROW" clause.

ex:
	create or replace trigger trg4 before delete on student FOR EACH ROW
	begin 
	DBMS_OUTPUT.PUT_LINE('Deleted!!!!!!');
	end;
	/

	delete from student; // trigger will execute 4 time 



Q) Write a query to see the list of triggers present in database?

	select object_name from user_objects where object_type='TRIGGER';


Q) Write a query to see the source code of a trigger?

	select text from user_source where name='TRG4';


Q) Write a query to drop the package?

	drop trigger trg1;
	drop trigger trg2;
	drop trigger trg3;
	drop trigger trg4;
	


















